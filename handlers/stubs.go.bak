// handlers/stubs.go
package handlers

import (
	"bible-quiz-pro/database"
	"bible-quiz-pro/middleware"
	"bible-quiz-pro/models"
	"time"

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/websocket/v2"
)

// ============ FRIEND HANDLERS ============

func SendFriendRequest(c *fiber.Ctx) error {
	userID, err := middleware.GetUserID(c)
	if err != nil {
		return c.Status(401).JSON(fiber.Map{"error": "Unauthorized"})
	}

	var req struct {
		FriendID uint `json:"friend_id"`
	}
	if err := c.BodyParser(&req); err != nil {
		return c.Status(400).JSON(fiber.Map{"error": "Invalid request"})
	}

	db := database.GetDB()
	friendRequest := models.FriendRequest{
		FromUserID: userID,
		ToUserID:   req.FriendID,
		Status:     "pending",
		CreatedAt:  time.Now(),
	}

	if err := db.Create(&friendRequest).Error; err != nil {
		return c.Status(500).JSON(fiber.Map{"error": "Failed to send request"})
	}

	return c.JSON(fiber.Map{"success": true, "message": "Friend request sent"})
}

func AcceptFriendRequest(c *fiber.Ctx) error {
	userID, err := middleware.GetUserID(c)
	if err != nil {
		return c.Status(401).JSON(fiber.Map{"error": "Unauthorized"})
	}

	var req struct {
		RequestID uint `json:"request_id"`
	}
	if err := c.BodyParser(&req); err != nil {
		return c.Status(400).JSON(fiber.Map{"error": "Invalid request"})
	}

	db := database.GetDB()
	
	// Update friend request
	if err := db.Model(&models.FriendRequest{}).Where("id = ? AND to_user_id = ?", req.RequestID, userID).Update("status", "accepted").Error; err != nil {
		return c.Status(500).JSON(fiber.Map{"error": "Failed to accept request"})
	}

	var friendRequest models.FriendRequest
	db.First(&friendRequest, req.RequestID)

	// Create friend relationship
	friend1 := models.Friend{
		UserID:    userID,
		FriendID:  friendRequest.FromUserID,
		CreatedAt: time.Now(),
	}
	friend2 := models.Friend{
		UserID:    friendRequest.FromUserID,
		FriendID:  userID,
		CreatedAt: time.Now(),
	}

	db.Create(&friend1)
	db.Create(&friend2)

	return c.JSON(fiber.Map{"success": true, "message": "Friend request accepted"})
}

func RejectFriendRequest(c *fiber.Ctx) error {
	userID, err := middleware.GetUserID(c)
	if err != nil {
		return c.Status(401).JSON(fiber.Map{"error": "Unauthorized"})
	}

	var req struct {
		RequestID uint `json:"request_id"`
	}
	if err := c.BodyParser(&req); err != nil {
		return c.Status(400).JSON(fiber.Map{"error": "Invalid request"})
	}

	db := database.GetDB()
	if err := db.Model(&models.FriendRequest{}).Where("id = ? AND to_user_id = ?", req.RequestID, userID).Update("status", "rejected").Error; err != nil {
		return c.Status(500).JSON(fiber.Map{"error": "Failed to reject request"})
	}

	return c.JSON(fiber.Map{"success": true, "message": "Friend request rejected"})
}

// ============ WEBSOCKET HANDLER ============

